
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftAleftASSIGNleftORleftANDleftEQNEGELEGTLTleftNOTleftLCBLRBLSBleftRCBRRBRSBleftSUMSUBleftREMAINDERleftMULDIVleftIDINTEGERNUMBERFLOATNUMBERFALSETRUEleftLRBRRBleftIFleftEleftELIFELSEAND ASSIGN BOOLEAN COMMA DIV ELIF ELSE EQ ERROR FALSE FLOAT FLOATNUMBER FOR GE GT ID IF INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MUL NE NOT OR PRINT RCB REMAINDER RETURN RRB RSB SEMICOLON SUB SUM THEN TRUE VOID WHILEprogram : declist MAIN LRB RRB blockdeclist : declist decdeclist : dec : vardectype : INTEGERiddec : IDiddec : ID LSB exp RSBiddec : ID ASSIGN expidlist : iddec COMMA idlistidlist : iddecvardec : type idlist SEMICOLONvarlist : varlist vardecvarlist : block : LCB varlist stmtlist RCBstmtlist : stmt stmtliststmtlist : stmt : blocklvalue : IDlvalue : ID LSB exp RSBstmt : exp SEMICOLONm : %prec An : %prec Astmt : WHILE LRB exp RRB m stmtstmt : FOR LRB exp SEMICOLON m exp SEMICOLON exp RRB m stmtstmt : ifnoelse n elseiflist ifwithelseifnoelse :  IF LRB exp RRB m stmtifwithelse : ELSE m stmtifwithelse : %prec IFstmt : PRINT LRB ID RRB SEMICOLONelseiflist : ELIF LRB exp RRB m stmt n elseiflistelseiflist : %prec Eexp : lvalue ASSIGN expexp : exp SUM expexp : exp SUB expexp : exp MUL expexp : exp DIV expexp : exp REMAINDER expexp : exp OR m expexp : exp AND m expexp : exp relop exp %prec EQexp : constexp : lvalueexp : LRB exp RRBexp : SUB expexp : NOT expconst : INTEGERNUMBERconst : FALSEconst : TRUErelop : GTrelop : LTrelop : NErelop : EQrelop : LErelop : GE'
    
_lr_action_items = {'MAIN':([0,2,4,5,13,],[-3,3,-2,-4,-11,]),'INTEGER':([0,2,4,5,13,18,31,53,],[-3,7,-2,-4,-11,-13,7,-12,]),'$end':([1,17,73,],[0,-1,-14,]),'LRB':([3,13,15,16,18,23,25,26,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,57,58,59,60,61,68,69,73,75,76,77,78,80,86,87,90,91,92,93,94,96,97,98,99,101,102,103,105,106,107,108,109,111,112,113,114,115,116,],[8,-11,25,25,-13,25,25,25,25,25,25,25,25,25,25,-21,-21,25,-49,-50,-51,-52,-53,-54,25,-12,25,-17,76,77,-22,79,80,25,25,-14,-20,25,25,-31,25,-28,94,-21,-21,-25,-21,25,-21,25,25,25,-29,25,-23,-27,-21,-26,25,25,-22,-21,-31,25,-30,-24,]),'ID':([6,7,13,14,15,16,18,23,25,26,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,59,68,69,73,75,76,77,78,79,80,86,90,91,92,93,94,96,97,98,99,101,102,103,105,106,107,108,109,111,112,113,114,115,116,],[11,-5,-11,11,20,20,-13,20,20,20,20,20,20,20,20,20,20,-21,-21,20,-49,-50,-51,-52,-53,-54,20,-12,20,-17,-22,20,20,-14,-20,20,20,-31,88,20,-28,-21,-21,-25,-21,20,-21,20,20,20,-29,20,-23,-27,-21,-26,20,20,-22,-21,-31,20,-30,-24,]),'RRB':([8,20,22,24,27,28,29,49,50,51,63,64,65,66,67,70,71,72,81,82,83,84,88,89,100,110,],[12,-18,-42,-41,-46,-47,-48,-44,72,-45,-33,-34,-35,-36,-37,-40,-32,-43,-19,-38,-39,90,95,96,106,112,]),'SEMICOLON':([9,10,11,19,20,22,24,27,28,29,30,33,49,51,56,63,64,65,66,67,70,71,72,81,82,83,85,95,104,],[13,-10,-6,-9,-18,-42,-41,-46,-47,-48,-8,-7,-44,-45,75,-33,-34,-35,-36,-37,-40,-32,-43,-19,-38,-39,91,101,108,]),'COMMA':([10,11,20,22,24,27,28,29,30,33,49,51,63,64,65,66,67,70,71,72,81,82,83,],[14,-6,-18,-42,-41,-46,-47,-48,-8,-7,-44,-45,-33,-34,-35,-36,-37,-40,-32,-43,-19,-38,-39,]),'LSB':([11,20,],[15,32,]),'ASSIGN':([11,20,22,81,],[16,-18,48,-19,]),'LCB':([12,13,18,31,53,54,55,59,73,75,78,86,90,92,93,96,97,99,101,102,103,105,106,107,109,111,112,113,114,115,116,],[18,-11,-13,18,-12,18,-17,-22,-14,-20,-31,-28,-21,-25,-21,-21,18,18,-29,18,-23,-27,-21,-26,18,-22,-21,-31,18,-30,-24,]),'WHILE':([13,18,31,53,54,55,59,73,75,78,86,90,92,93,96,97,99,101,102,103,105,106,107,109,111,112,113,114,115,116,],[-11,-13,57,-12,57,-17,-22,-14,-20,-31,-28,-21,-25,-21,-21,57,57,-29,57,-23,-27,-21,-26,57,-22,-21,-31,57,-30,-24,]),'FOR':([13,18,31,53,54,55,59,73,75,78,86,90,92,93,96,97,99,101,102,103,105,106,107,109,111,112,113,114,115,116,],[-11,-13,58,-12,58,-17,-22,-14,-20,-31,-28,-21,-25,-21,-21,58,58,-29,58,-23,-27,-21,-26,58,-22,-21,-31,58,-30,-24,]),'PRINT':([13,18,31,53,54,55,59,73,75,78,86,90,92,93,96,97,99,101,102,103,105,106,107,109,111,112,113,114,115,116,],[-11,-13,60,-12,60,-17,-22,-14,-20,-31,-28,-21,-25,-21,-21,60,60,-29,60,-23,-27,-21,-26,60,-22,-21,-31,60,-30,-24,]),'SUB':([13,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,59,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,80,81,82,83,84,85,86,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,],[-11,23,23,-13,-18,35,-42,23,-41,23,23,-46,-47,-48,35,23,23,23,23,23,23,23,-21,-21,23,-49,-50,-51,-52,-53,-54,23,-44,35,35,-12,23,-17,35,-22,35,-33,-34,-35,-36,-37,23,23,35,35,-43,-14,-20,23,23,-31,23,-19,35,35,35,35,-28,35,-21,-21,-25,-21,23,-21,23,23,23,35,-29,23,-23,35,-27,-21,-26,23,23,35,-22,-21,-31,23,-30,-24,]),'NOT':([13,15,16,18,23,25,26,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,59,68,69,73,75,76,77,78,80,86,90,91,92,93,94,96,97,98,99,101,102,103,105,106,107,108,109,111,112,113,114,115,116,],[-11,26,26,-13,26,26,26,26,26,26,26,26,26,26,-21,-21,26,-49,-50,-51,-52,-53,-54,26,-12,26,-17,-22,26,26,-14,-20,26,26,-31,26,-28,-21,-21,-25,-21,26,-21,26,26,26,-29,26,-23,-27,-21,-26,26,26,-22,-21,-31,26,-30,-24,]),'IF':([13,18,31,53,54,55,59,73,75,78,86,90,92,93,96,97,99,101,102,103,105,106,107,109,111,112,113,114,115,116,],[-11,-13,61,-12,61,-17,-22,-14,-20,-31,-28,-21,-25,-21,-21,61,61,-29,61,-23,-27,-21,-26,61,-22,-21,-31,61,-30,-24,]),'INTEGERNUMBER':([13,15,16,18,23,25,26,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,59,68,69,73,75,76,77,78,80,86,90,91,92,93,94,96,97,98,99,101,102,103,105,106,107,108,109,111,112,113,114,115,116,],[-11,27,27,-13,27,27,27,27,27,27,27,27,27,27,-21,-21,27,-49,-50,-51,-52,-53,-54,27,-12,27,-17,-22,27,27,-14,-20,27,27,-31,27,-28,-21,-21,-25,-21,27,-21,27,27,27,-29,27,-23,-27,-21,-26,27,27,-22,-21,-31,27,-30,-24,]),'FALSE':([13,15,16,18,23,25,26,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,59,68,69,73,75,76,77,78,80,86,90,91,92,93,94,96,97,98,99,101,102,103,105,106,107,108,109,111,112,113,114,115,116,],[-11,28,28,-13,28,28,28,28,28,28,28,28,28,28,-21,-21,28,-49,-50,-51,-52,-53,-54,28,-12,28,-17,-22,28,28,-14,-20,28,28,-31,28,-28,-21,-21,-25,-21,28,-21,28,28,28,-29,28,-23,-27,-21,-26,28,28,-22,-21,-31,28,-30,-24,]),'TRUE':([13,15,16,18,23,25,26,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,59,68,69,73,75,76,77,78,80,86,90,91,92,93,94,96,97,98,99,101,102,103,105,106,107,108,109,111,112,113,114,115,116,],[-11,29,29,-13,29,29,29,29,29,29,29,29,29,29,-21,-21,29,-49,-50,-51,-52,-53,-54,29,-12,29,-17,-22,29,29,-14,-20,29,29,-31,29,-28,-21,-21,-25,-21,29,-21,29,29,29,-29,29,-23,-27,-21,-26,29,29,-22,-21,-31,29,-30,-24,]),'RCB':([13,18,31,52,53,54,55,59,73,74,75,78,86,92,101,103,105,107,111,113,115,116,],[-11,-13,-16,73,-12,-16,-17,-22,-14,-15,-20,-31,-28,-25,-29,-23,-27,-26,-22,-31,-30,-24,]),'RSB':([20,21,22,24,27,28,29,49,51,62,63,64,65,66,67,70,71,72,81,82,83,],[-18,33,-42,-41,-46,-47,-48,-44,-45,81,-33,-34,-35,-36,-37,-40,-32,-43,-19,-38,-39,]),'SUM':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,34,-42,-41,-46,-47,-48,34,-44,34,34,34,34,-33,-34,-35,-36,-37,34,34,-43,-19,34,34,34,34,34,34,34,34,]),'MUL':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,36,-42,-41,-46,-47,-48,36,36,36,36,36,36,36,36,-35,-36,36,36,36,-43,-19,36,36,36,36,36,36,36,36,]),'DIV':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,37,-42,-41,-46,-47,-48,37,37,37,37,37,37,37,37,-35,-36,37,37,37,-43,-19,37,37,37,37,37,37,37,37,]),'REMAINDER':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,38,-42,-41,-46,-47,-48,38,38,38,38,38,38,38,38,-35,-36,-37,38,38,-43,-19,38,38,38,38,38,38,38,38,]),'OR':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,39,-42,-41,-46,-47,-48,39,-44,39,-45,39,39,-33,-34,-35,-36,-37,-40,39,-43,-19,-38,-39,39,39,39,39,39,39,]),'AND':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,40,-42,-41,-46,-47,-48,40,-44,40,-45,40,40,-33,-34,-35,-36,-37,-40,40,-43,-19,40,-39,40,40,40,40,40,40,]),'GT':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,42,-42,-41,-46,-47,-48,42,-44,42,-45,42,42,-33,-34,-35,-36,-37,-40,42,-43,-19,42,42,42,42,42,42,42,42,]),'LT':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,43,-42,-41,-46,-47,-48,43,-44,43,-45,43,43,-33,-34,-35,-36,-37,-40,43,-43,-19,43,43,43,43,43,43,43,43,]),'NE':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,44,-42,-41,-46,-47,-48,44,-44,44,-45,44,44,-33,-34,-35,-36,-37,-40,44,-43,-19,44,44,44,44,44,44,44,44,]),'EQ':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,45,-42,-41,-46,-47,-48,45,-44,45,-45,45,45,-33,-34,-35,-36,-37,-40,45,-43,-19,45,45,45,45,45,45,45,45,]),'LE':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,46,-42,-41,-46,-47,-48,46,-44,46,-45,46,46,-33,-34,-35,-36,-37,-40,46,-43,-19,46,46,46,46,46,46,46,46,]),'GE':([20,21,22,24,27,28,29,30,49,50,51,56,62,63,64,65,66,67,70,71,72,81,82,83,84,85,89,100,104,110,],[-18,47,-42,-41,-46,-47,-48,47,-44,47,-45,47,47,-33,-34,-35,-36,-37,-40,47,-43,-19,47,47,47,47,47,47,47,47,]),'ELIF':([55,59,73,75,78,86,92,101,103,105,107,111,113,115,116,],[-17,-22,-14,-20,87,-28,-25,-29,-23,-27,-26,-22,87,-30,-24,]),'ELSE':([55,59,73,75,78,86,92,101,103,105,107,111,113,115,116,],[-17,-22,-14,-20,-31,93,-25,-29,-23,-27,-26,-22,-31,-30,-24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([2,],[4,]),'vardec':([2,31,],[5,53,]),'type':([2,31,],[6,6,]),'idlist':([6,14,],[9,19,]),'iddec':([6,14,],[10,10,]),'block':([12,31,54,97,99,102,109,114,],[17,55,55,55,55,55,55,55,]),'exp':([15,16,23,25,26,31,32,34,35,36,37,38,41,48,54,68,69,76,77,80,94,97,98,99,102,108,109,114,],[21,30,49,50,51,56,62,63,64,65,66,67,70,71,56,82,83,84,85,89,100,56,104,56,56,110,56,56,]),'lvalue':([15,16,23,25,26,31,32,34,35,36,37,38,41,48,54,68,69,76,77,80,94,97,98,99,102,108,109,114,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'const':([15,16,23,25,26,31,32,34,35,36,37,38,41,48,54,68,69,76,77,80,94,97,98,99,102,108,109,114,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'varlist':([18,],[31,]),'relop':([21,30,49,50,51,56,62,63,64,65,66,67,70,71,82,83,84,85,89,100,104,110,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'stmtlist':([31,54,],[52,74,]),'stmt':([31,54,97,99,102,109,114,],[54,54,103,105,107,111,116,]),'ifnoelse':([31,54,97,99,102,109,114,],[59,59,59,59,59,59,59,]),'m':([39,40,90,91,93,96,106,112,],[68,69,97,98,99,102,109,114,]),'n':([59,111,],[78,113,]),'elseiflist':([78,113,],[86,115,]),'ifwithelse':([86,],[92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parser1.py',19),
  ('declist -> declist dec','declist',2,'p_declist_decdeclist1','parser1.py',25),
  ('declist -> <empty>','declist',0,'p_declist_lambda','parser1.py',31),
  ('dec -> vardec','dec',1,'p_dec_vardec','parser1.py',37),
  ('type -> INTEGER','type',1,'p_type_int','parser1.py',43),
  ('iddec -> ID','iddec',1,'p_iddec_id','parser1.py',49),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec_idexp','parser1.py',55),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec_idAexp','parser1.py',62),
  ('idlist -> iddec COMMA idlist','idlist',3,'p_idlist_idlist','parser1.py',68),
  ('idlist -> iddec','idlist',1,'p_idlist_iddec','parser1.py',74),
  ('vardec -> type idlist SEMICOLON','vardec',3,'p_vardec','parser1.py',80),
  ('varlist -> varlist vardec','varlist',2,'p_varlist_varlist','parser1.py',86),
  ('varlist -> <empty>','varlist',0,'p_varlist_vardec','parser1.py',92),
  ('block -> LCB varlist stmtlist RCB','block',4,'p_block','parser1.py',97),
  ('stmtlist -> stmt stmtlist','stmtlist',2,'p_stmtlist_stmtlist','parser1.py',103),
  ('stmtlist -> <empty>','stmtlist',0,'p_stmtlist_lambda','parser1.py',108),
  ('stmt -> block','stmt',1,'p_stmt_block','parser1.py',113),
  ('lvalue -> ID','lvalue',1,'p_lvalue_id','parser1.py',119),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue_idexp','parser1.py',125),
  ('stmt -> exp SEMICOLON','stmt',2,'p_stmt_exp','parser1.py',131),
  ('m -> <empty>','m',0,'p_m','parser1.py',138),
  ('n -> <empty>','n',0,'p_n','parser1.py',145),
  ('stmt -> WHILE LRB exp RRB m stmt','stmt',6,'p_stmt_while','parser1.py',152),
  ('stmt -> FOR LRB exp SEMICOLON m exp SEMICOLON exp RRB m stmt','stmt',11,'p_stmt_for','parser1.py',172),
  ('stmt -> ifnoelse n elseiflist ifwithelse','stmt',4,'p_stmt_ifnoelse','parser1.py',208),
  ('ifnoelse -> IF LRB exp RRB m stmt','ifnoelse',6,'p_ifnoelse_ifnoelse','parser1.py',309),
  ('ifwithelse -> ELSE m stmt','ifwithelse',3,'p_ifwithelse_else','parser1.py',344),
  ('ifwithelse -> <empty>','ifwithelse',0,'p_ifwithelse_lambda','parser1.py',357),
  ('stmt -> PRINT LRB ID RRB SEMICOLON','stmt',5,'p_stmt_print','parser1.py',362),
  ('elseiflist -> ELIF LRB exp RRB m stmt n elseiflist','elseiflist',8,'p_elseiflist_elseiflist','parser1.py',368),
  ('elseiflist -> <empty>','elseiflist',0,'p_elseiflist_lambda','parser1.py',418),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp_lvalueassignexp','parser1.py',423),
  ('exp -> exp SUM exp','exp',3,'p_exp_expopexp','parser1.py',433),
  ('exp -> exp SUB exp','exp',3,'p_exp_expsumexp','parser1.py',438),
  ('exp -> exp MUL exp','exp',3,'p_exp_expsubexp','parser1.py',443),
  ('exp -> exp DIV exp','exp',3,'p_exp_expdivexp','parser1.py',448),
  ('exp -> exp REMAINDER exp','exp',3,'p_exp_expmodexp','parser1.py',453),
  ('exp -> exp OR m exp','exp',4,'p_exp_exporexp','parser1.py',458),
  ('exp -> exp AND m exp','exp',4,'p_exp_expandexp','parser1.py',470),
  ('exp -> exp relop exp','exp',3,'p_exp_exprexp','parser1.py',484),
  ('exp -> const','exp',1,'p_exp_const','parser1.py',505),
  ('exp -> lvalue','exp',1,'p_exp_lvalue','parser1.py',512),
  ('exp -> LRB exp RRB','exp',3,'p_exp_explrb','parser1.py',519),
  ('exp -> SUB exp','exp',2,'p_exp_expnegative','parser1.py',526),
  ('exp -> NOT exp','exp',2,'p_exp_expnot','parser1.py',535),
  ('const -> INTEGERNUMBER','const',1,'p_const_intnumber','parser1.py',544),
  ('const -> FALSE','const',1,'p_const_true','parser1.py',550),
  ('const -> TRUE','const',1,'p_const_false','parser1.py',557),
  ('relop -> GT','relop',1,'p_relop_GT','parser1.py',564),
  ('relop -> LT','relop',1,'p_relop_LT','parser1.py',570),
  ('relop -> NE','relop',1,'p_relop_NE','parser1.py',576),
  ('relop -> EQ','relop',1,'p_relop_EQ','parser1.py',582),
  ('relop -> LE','relop',1,'p_relop_LE','parser1.py',588),
  ('relop -> GE','relop',1,'p_relop_GE','parser1.py',594),
]
